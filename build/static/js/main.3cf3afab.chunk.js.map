{"version":3,"sources":["pages/HomePage.js","pages/CreaturesPage.js","pages/CreatureDetailPage.js","pages/MentionsPage.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","CreaturesPage","useState","creatures","setCreatures","useEffect","fetch","then","r","json","data","length","map","item","key","id","to","nom","CreatureDetailPage","creature","setCreature","style","display","width","borderRadius","src","image","description","pouvoirs","p","MentionsPage","paths","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAgBeA,EAdE,kBACf,6BACE,wFAGA,4DAEG,IACD,iDAEF,+F,OCiBWC,EA1BO,WAAM,MAEQC,mBAAS,IAFjB,mBAEnBC,EAFmB,KAERC,EAFQ,KAW1B,OARAC,qBAAU,WACRC,MAAM,uBACHC,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACG,GACLN,EAAaM,QAEhB,IAGD,4BAEyB,IAArBP,EAAUQ,OACN,aACAR,EAAUS,KAAI,SAACC,GAAD,OACd,wBAAIC,IAAKD,EAAKE,IACZ,kBAAC,IAAD,CAAMC,GAAE,oBAAeH,EAAKE,KAAOF,EAAKI,WCOvCC,EA1BY,SAAC,GAAY,IAAD,EAATH,EAAS,EAATA,GAAS,EAGLb,mBAAS,MAHJ,mBAG9BiB,EAH8B,KAGpBC,EAHoB,KAYrC,OARAf,qBAAU,WACRC,MAAM,SAAD,OAAUS,EAAV,UACFR,MAAK,SAACC,GAAD,OAAOA,EAAEC,UACdF,MAAK,SAACG,GACLU,EAAYV,QAEf,IAGD,6BACE,wBAAIW,MAAO,CAACC,QAAS,SACnB,6BAAK,yBAAKD,MAAO,CAACE,MAAO,QAASC,aAAc,SAAUC,IAAKN,GAAYA,EAASO,SACpF,6BAAMP,GAAYA,EAASF,MAE7B,2BAAIE,GAAYA,EAASQ,aACzB,mCACGR,QADH,IACGA,OADH,YACGA,EAAUS,gBADb,aACG,EAAoBhB,KAAI,SAACiB,GAAD,OAAO,4BAAKA,SClB9BC,EAFM,kBAAM,uDCKrBC,EACE,IADFA,EAEO,YAFPA,EAGM,mBA4BGC,MAxBf,WACE,OACE,6BACE,gCACE,6BACE,kBAAC,IAAD,CAAMhB,GAAIe,GAAV,QACC,IAFH,IAIE,kBAAC,IAAD,CAAMf,GAAIe,GAAV,+BACC,IALH,IAOE,kBAAC,IAAD,CAAMf,GAAIe,GAAV,yBAGJ,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAUE,KAAMF,IAChB,kBAAC,EAAD,CAAeE,KAAMF,IACrB,kBAAC,EAAD,CAAcE,KAAMF,IACpB,kBAAC,EAAD,CAAoBE,KAAK,oBCpBbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,iB","file":"static/js/main.3cf3afab.chunk.js","sourcesContent":["import React from 'react';\n\nconst HomePage = () => (\n  <div>\n    <p>\n  Ceci est un site génial sur les créatures mystiques\n    </p>\n    <p>\nDécouvrez en exclusivité\n      {' '}\n      <strong>le minotaure</strong>\n    </p>\n    <p>La dernière créature ajoutée est : « le lutin »</p>\n  </div>\n);\n\nexport default HomePage;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from '@reach/router';\n\nconst CreaturesPage = () => {\n  // requete vers le backend\n  const [creatures, setCreatures] = useState([]);\n  useEffect(() => {\n    fetch('data/creatures.json')\n      .then((r) => r.json())\n      .then((data) => {\n        setCreatures(data);\n      });\n  }, []);\n\n  return (\n    <ul>\n      {\n        creatures.length === 0\n          ? 'Loading...'\n          : creatures.map((item) => (\n            <li key={item.id}>\n              <Link to={`/creature/${item.id}`}>{item.nom}</Link>\n            </li>\n          ))\n      }\n    </ul>\n  );\n};\n\nexport default CreaturesPage;\n","import React, { useState, useEffect } from 'react';\n\nconst CreatureDetailPage = ({ id }) => {\n  // requete vers le backend\n\n  const [creature, setCreature] = useState(null);\n  useEffect(() => {\n    fetch(`/data/${id}.json`)\n      .then((r) => r.json())\n      .then((data) => {\n        setCreature(data);\n      });\n  }, []);\n\n  return (\n    <div>\n      <h1 style={{display: \"flex\"}}>\n        <div><img style={{width: \"100px\", borderRadius: \"100px\"}} src={creature && creature.image} /></div>\n        <div>{creature && creature.nom }</div> \n      </h1>\n      <p>{creature && creature.description }</p>\n      <ol>\n        {creature?.pouvoirs?.map((p) => <li>{p}</li>)}\n      </ol>\n    </div>\n  );\n};\n\nexport default CreatureDetailPage;\n","import React from 'react';\n\nconst MentionsPage = () => <div>Ce site est légal.</div>;\n\nexport default MentionsPage;\n","import React from 'react';\nimport { Router, Link } from '@reach/router';\nimport HomePage from './pages/HomePage';\nimport CreaturesPage from './pages/CreaturesPage';\nimport CreatureDetailPage from './pages/CreatureDetailPage';\nimport MentionsPage from './pages/MentionsPage';\n\nconst paths = {\n  home: '/',\n  creatures: 'creatures',\n  mentions: 'mentions-legales',\n};\n\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <nav>\n          <Link to={paths.home}>Home</Link>\n          {' '}\n|\n          <Link to={paths.creatures}>Créatures légendaires</Link>\n          {' '}\n|\n          <Link to={paths.mentions}>Mentions légales</Link>\n        </nav>\n      </header>\n      <Router>\n        <HomePage path={paths.home} />\n        <CreaturesPage path={paths.creatures} />\n        <MentionsPage path={paths.mentions} />\n        <CreatureDetailPage path=\"creature/:id\" />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}